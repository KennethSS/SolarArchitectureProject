// Generated by Dagger (https://dagger.dev).
package com.solar.architecture.dagger.module;

import com.solar.architecture.mvvm.viewmodel.BasicViewModel;
import com.solar.domain.repository.FoodRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ActivityModule_ProvideBasicViewModelFactory implements Factory<BasicViewModel> {
  private final ActivityModule module;

  private final Provider<FoodRepository> repositoryProvider;

  public ActivityModule_ProvideBasicViewModelFactory(ActivityModule module,
      Provider<FoodRepository> repositoryProvider) {
    this.module = module;
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public BasicViewModel get() {
    return provideBasicViewModel(module, repositoryProvider.get());
  }

  public static ActivityModule_ProvideBasicViewModelFactory create(ActivityModule module,
      Provider<FoodRepository> repositoryProvider) {
    return new ActivityModule_ProvideBasicViewModelFactory(module, repositoryProvider);
  }

  public static BasicViewModel provideBasicViewModel(ActivityModule instance,
      FoodRepository repository) {
    return Preconditions.checkNotNull(instance.provideBasicViewModel(repository), "Cannot return null from a non-@Nullable @Provides method");
  }
}
