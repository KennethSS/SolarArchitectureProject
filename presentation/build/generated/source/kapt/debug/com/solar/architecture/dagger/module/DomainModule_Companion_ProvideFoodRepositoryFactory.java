// Generated by Dagger (https://dagger.dev).
package com.solar.architecture.dagger.module;

import com.solar.data.repository.FoodRemote;
import com.solar.domain.repository.FoodRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DomainModule_Companion_ProvideFoodRepositoryFactory implements Factory<FoodRepository> {
  private final Provider<FoodRemote> foodRemoteProvider;

  public DomainModule_Companion_ProvideFoodRepositoryFactory(
      Provider<FoodRemote> foodRemoteProvider) {
    this.foodRemoteProvider = foodRemoteProvider;
  }

  @Override
  public FoodRepository get() {
    return provideFoodRepository(foodRemoteProvider.get());
  }

  public static DomainModule_Companion_ProvideFoodRepositoryFactory create(
      Provider<FoodRemote> foodRemoteProvider) {
    return new DomainModule_Companion_ProvideFoodRepositoryFactory(foodRemoteProvider);
  }

  public static FoodRepository provideFoodRepository(FoodRemote foodRemote) {
    return Preconditions.checkNotNull(DomainModule.Companion.provideFoodRepository(foodRemote), "Cannot return null from a non-@Nullable @Provides method");
  }
}
