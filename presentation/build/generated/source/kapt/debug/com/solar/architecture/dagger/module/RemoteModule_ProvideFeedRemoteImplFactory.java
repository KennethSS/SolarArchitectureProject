// Generated by Dagger (https://dagger.dev).
package com.solar.architecture.dagger.module;

import com.solar.data.repository.FoodRemote;
import com.solar.remote.service.FoodService;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RemoteModule_ProvideFeedRemoteImplFactory implements Factory<FoodRemote> {
  private final RemoteModule module;

  private final Provider<FoodService> foodServiceProvider;

  public RemoteModule_ProvideFeedRemoteImplFactory(RemoteModule module,
      Provider<FoodService> foodServiceProvider) {
    this.module = module;
    this.foodServiceProvider = foodServiceProvider;
  }

  @Override
  public FoodRemote get() {
    return provideFeedRemoteImpl(module, foodServiceProvider.get());
  }

  public static RemoteModule_ProvideFeedRemoteImplFactory create(RemoteModule module,
      Provider<FoodService> foodServiceProvider) {
    return new RemoteModule_ProvideFeedRemoteImplFactory(module, foodServiceProvider);
  }

  public static FoodRemote provideFeedRemoteImpl(RemoteModule instance, FoodService foodService) {
    return Preconditions.checkNotNull(instance.provideFeedRemoteImpl(foodService), "Cannot return null from a non-@Nullable @Provides method");
  }
}
