// Generated by Dagger (https://dagger.dev).
package com.solar.architecture.dagger.module;

import androidx.lifecycle.ViewModel;
import com.solar.domain.repository.FoodRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ViewModelModule_ProvideBasicViewModelFactory implements Factory<ViewModel> {
  private final ViewModelModule module;

  private final Provider<FoodRepository> repositoryProvider;

  public ViewModelModule_ProvideBasicViewModelFactory(ViewModelModule module,
      Provider<FoodRepository> repositoryProvider) {
    this.module = module;
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public ViewModel get() {
    return provideBasicViewModel(module, repositoryProvider.get());
  }

  public static ViewModelModule_ProvideBasicViewModelFactory create(ViewModelModule module,
      Provider<FoodRepository> repositoryProvider) {
    return new ViewModelModule_ProvideBasicViewModelFactory(module, repositoryProvider);
  }

  public static ViewModel provideBasicViewModel(ViewModelModule instance,
      FoodRepository repository) {
    return Preconditions.checkNotNull(instance.provideBasicViewModel(repository), "Cannot return null from a non-@Nullable @Provides method");
  }
}
