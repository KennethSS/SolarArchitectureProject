// Generated by Dagger (https://dagger.dev).
package com.solar.architecture.dagger.component;

import com.solar.architecture.MainActivity;
import com.solar.architecture.MainActivity_MembersInjector;
import com.solar.architecture.dagger.module.ActivityModule;
import com.solar.architecture.dagger.module.ActivityModule_ProvideBasicViewModelFactory;
import com.solar.architecture.dagger.module.DomainModule;
import com.solar.architecture.dagger.module.DomainModule_Companion_ProvideFoodRepositoryFactory;
import com.solar.architecture.dagger.module.RemoteModule;
import com.solar.architecture.dagger.module.RemoteModule_ProvideFeedRemoteImplFactory;
import com.solar.architecture.dagger.module.RemoteModule_ProvideFoodServiceFactory;
import com.solar.architecture.mvvm.view.MvvmActivity;
import com.solar.architecture.mvvm.view.MvvmActivity_MembersInjector;
import com.solar.architecture.mvvm.viewmodel.BasicViewModel;
import com.solar.data.repository.FoodRemote;
import com.solar.domain.repository.FoodRepository;
import dagger.internal.Preconditions;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerActivityComponent implements ActivityComponent {
  private final RemoteModule remoteModule;

  private final ActivityModule activityModule;

  private DaggerActivityComponent(RemoteModule remoteModuleParam,
      ActivityModule activityModuleParam, AppComponent appComponent) {
    this.remoteModule = remoteModuleParam;
    this.activityModule = activityModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private FoodRemote getFoodRemote() {
    return RemoteModule_ProvideFeedRemoteImplFactory.provideFeedRemoteImpl(remoteModule, RemoteModule_ProvideFoodServiceFactory.provideFoodService(remoteModule));}

  private FoodRepository getFoodRepository() {
    return DomainModule_Companion_ProvideFoodRepositoryFactory.provideFoodRepository(getFoodRemote());}

  private BasicViewModel getBasicViewModel() {
    return ActivityModule_ProvideBasicViewModelFactory.provideBasicViewModel(activityModule, getFoodRepository());}

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);}

  @Override
  public void inject(MvvmActivity mvvmActivity) {
    injectMvvmActivity(mvvmActivity);}

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectViewModel(instance, getBasicViewModel());
    return instance;
  }

  private MvvmActivity injectMvvmActivity(MvvmActivity instance) {
    MvvmActivity_MembersInjector.injectViewModel(instance, getBasicViewModel());
    return instance;
  }

  public static final class Builder {
    private RemoteModule remoteModule;

    private ActivityModule activityModule;

    private AppComponent appComponent;

    private Builder() {
    }

    public Builder remoteModule(RemoteModule remoteModule) {
      this.remoteModule = Preconditions.checkNotNull(remoteModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder domainModule(DomainModule domainModule) {
      Preconditions.checkNotNull(domainModule);
      return this;
    }

    public Builder activityModule(ActivityModule activityModule) {
      this.activityModule = Preconditions.checkNotNull(activityModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }

    public ActivityComponent build() {
      if (remoteModule == null) {
        this.remoteModule = new RemoteModule();
      }
      if (activityModule == null) {
        this.activityModule = new ActivityModule();
      }
      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);
      return new DaggerActivityComponent(remoteModule, activityModule, appComponent);
    }
  }
}
